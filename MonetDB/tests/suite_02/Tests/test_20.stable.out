stdout of test 'test_20` in directory 'tests/suite_02` itself:

#> Mtest:	milS test_20 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_02 -single test_20.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:test_20.milS

loaded;
#---------------------------------#
# module	| usage_count	  #
#---------------------------------#
[ "algebra",	  1		  ]
[ "arith",	  1		  ]
[ "bat",	  1		  ]
[ "kernel",	  1		  ]
[ "str",	  1		  ]
[ "sys",	  1		  ]
[ "trans",	  1		  ]

Try: modules;                - for other modules.
     ls;                     - for persistent bat listing.
     sigs("<module>")        - for available commands per module.
     help("<command>")       - for help one-liner for a command.

#You are system administrator (adm)!
setoid(oid(2000000));
# analyse selection using indexing
print(count(k10_unique1));
[ 10000 ]
printf("#~BeginVariableOutput~#\n"); cpu.print; printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#-------------------------#
# BAT:		  cpu	  #
# (str)		  (int)	  #
#-------------------------#
[ "elapsed",	  0	  ]
[ "user",	  130	  ]
[ "elapuser",	  0	  ]
[ "system",	  60	  ]
[ "elapsystem",	  0	  ]
#~EndVariableOutput~#
t:=fragment(k10_unique1,0,10,int(nil),int(nil));
t:=fragment(k10_unique1,0,10,int(nil),int(nil));
t:=fragment(k10_unique1,0,10,int(nil),int(nil));
t:=fragment(k10_unique1,0,10,int(nil),int(nil));
t:=fragment(k10_unique1,0,10,int(nil),int(nil));
t:=fragment(k10_unique1,0,10,int(nil),int(nil));
printf("#~BeginVariableOutput~#\n"); cpu.print; printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#-------------------------#
# BAT:		  cpu	  #
# (str)		  (int)	  #
#-------------------------#
[ "elapsed",	  0	  ]
[ "user",	  140	  ]
[ "elapuser",	  10	  ]
[ "system",	  60	  ]
[ "elapsystem",	  0	  ]
#~EndVariableOutput~#
printf("#~BeginVariableOutput~#\n"); memory.print; printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#---------------------------------#
# BAT:		  mem		  #
# (str)		  (int)		  #
#---------------------------------#
[ "memincr",	  1310720	  ]
[ "arena",	  1359856	  ]
[ "ordblks",	  109		  ]
[ "smblks",	  7680		  ]
[ "hblkhd",	  15360		  ]
[ "hblks",	  480		  ]
[ "usmblks",	  308832	  ]
[ "fsmblks",	  443808	  ]
[ "uordblks",	  531368	  ]
[ "fordblks",	  60488		  ]
#~EndVariableOutput~#
printf("#~BeginVariableOutput~#\n"); io.print; printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#-------------------------#
# BAT:		  io	  #
# (str)		  (int)	  #
#-------------------------#
[ "maxrss",	  3088	  ]
[ "minflt",	  126	  ]
[ "majflt",	  1	  ]
[ "nswap",	  0	  ]
[ "inblock",	  4	  ]
[ "oublock",	  7	  ]
[ "nvcsw",	  22	  ]
[ "ninvcsw",	  1	  ]
#~EndVariableOutput~#

#Index first to speed-up selection
accbuild(k10_unique1,find(monet_acctbl,"index"));
printf("#~BeginVariableOutput~#\n"); cpu.print; printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#-------------------------#
# BAT:		  cpu	  #
# (str)		  (int)	  #
#-------------------------#
[ "elapsed",	  0	  ]
[ "user",	  160	  ]
[ "elapuser",	  20	  ]
[ "system",	  60	  ]
[ "elapsystem",	  0	  ]
#~EndVariableOutput~#
t:=fragment(k10_unique1,0,10,int(nil),int(nil));
t:=fragment(k10_unique1,0,10,int(nil),int(nil));
t:=fragment(k10_unique1,0,10,int(nil),int(nil));
t:=fragment(k10_unique1,0,10,int(nil),int(nil));
t:=fragment(k10_unique1,0,10,int(nil),int(nil));
t:=fragment(k10_unique1,0,10,int(nil),int(nil));
printf("#~BeginVariableOutput~#\n"); cpu.print; printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#-------------------------#
# BAT:		  cpu	  #
# (str)		  (int)	  #
#-------------------------#
[ "elapsed",	  0	  ]
[ "user",	  160	  ]
[ "elapuser",	  0	  ]
[ "system",	  60	  ]
[ "elapsystem",	  0	  ]
#~EndVariableOutput~#
printf("#~BeginVariableOutput~#\n"); memory.print; printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#---------------------------------#
# BAT:		  mem		  #
# (str)		  (int)		  #
#---------------------------------#
[ "memincr",	  122880	  ]
[ "arena",	  1482736	  ]
[ "ordblks",	  111		  ]
[ "smblks",	  7680		  ]
[ "hblkhd",	  15360		  ]
[ "hblks",	  480		  ]
[ "usmblks",	  309792	  ]
[ "fsmblks",	  442848	  ]
[ "uordblks",	  571384	  ]
[ "fordblks",	  143352	  ]
#~EndVariableOutput~#
printf("#~BeginVariableOutput~#\n"); io.print; printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#-------------------------#
# BAT:		  io	  #
# (str)		  (int)	  #
#-------------------------#
[ "maxrss",	  3248	  ]
[ "minflt",	  126	  ]
[ "majflt",	  1	  ]
[ "nswap",	  0	  ]
[ "inblock",	  4	  ]
[ "oublock",	  7	  ]
[ "nvcsw",	  22	  ]
[ "ninvcsw",	  1	  ]
#~EndVariableOutput~#
t:=fragment(k10_unique1,int(nil),int(nil),0,10);
t:=fragment(k10_unique1,int(nil),int(nil),0,10);
t:=fragment(k10_unique1,int(nil),int(nil),0,10);
t:=fragment(k10_unique1,int(nil),int(nil),0,10);
t:=fragment(k10_unique1,int(nil),int(nil),0,10);
t:=fragment(k10_unique1,int(nil),int(nil),0,10);
printf("#~BeginVariableOutput~#\n"); cpu.print; printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#-------------------------#
# BAT:		  cpu	  #
# (str)		  (int)	  #
#-------------------------#
[ "elapsed",	  0	  ]
[ "user",	  180	  ]
[ "elapuser",	  20	  ]
[ "system",	  60	  ]
[ "elapsystem",	  0	  ]
#~EndVariableOutput~#
printf("#~BeginVariableOutput~#\n"); memory.print; printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#---------------------------------#
# BAT:		  mem		  #
# (str)		  (int)		  #
#---------------------------------#
[ "memincr",	  0		  ]
[ "arena",	  1482736	  ]
[ "ordblks",	  111		  ]
[ "smblks",	  7680		  ]
[ "hblkhd",	  15360		  ]
[ "hblks",	  480		  ]
[ "usmblks",	  310560	  ]
[ "fsmblks",	  442080	  ]
[ "uordblks",	  571384	  ]
[ "fordblks",	  143352	  ]
#~EndVariableOutput~#
printf("#~BeginVariableOutput~#\n"); io.print; printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#-------------------------#
# BAT:		  io	  #
# (str)		  (int)	  #
#-------------------------#
[ "maxrss",	  3248	  ]
[ "minflt",	  126	  ]
[ "majflt",	  1	  ]
[ "nswap",	  0	  ]
[ "inblock",	  4	  ]
[ "oublock",	  7	  ]
[ "nvcsw",	  22	  ]
[ "ninvcsw",	  1	  ]
#~EndVariableOutput~#

#index the tail
accbuild(reverse(k10_unique1),find(monet_acctbl,"index"));
printf("#~BeginVariableOutput~#\n"); cpu.print; printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#-------------------------#
# BAT:		  cpu	  #
# (str)		  (int)	  #
#-------------------------#
[ "elapsed",	  0	  ]
[ "user",	  200	  ]
[ "elapuser",	  20	  ]
[ "system",	  60	  ]
[ "elapsystem",	  0	  ]
#~EndVariableOutput~#
t:=fragment(k10_unique1,int(nil),int(nil),0,10);
t:=fragment(k10_unique1,int(nil),int(nil),0,10);
t:=fragment(k10_unique1,int(nil),int(nil),0,10);
t:=fragment(k10_unique1,int(nil),int(nil),0,10);
t:=fragment(k10_unique1,int(nil),int(nil),0,10);
t:=fragment(k10_unique1,int(nil),int(nil),0,10);
printf("#~BeginVariableOutput~#\n"); cpu.print; printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#-------------------------#
# BAT:		  cpu	  #
# (str)		  (int)	  #
#-------------------------#
[ "elapsed",	  0	  ]
[ "user",	  210	  ]
[ "elapuser",	  10	  ]
[ "system",	  70	  ]
[ "elapsystem",	  10	  ]
#~EndVariableOutput~#
printf("#~BeginVariableOutput~#\n"); memory.print; printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#---------------------------------#
# BAT:		  mem		  #
# (str)		  (int)		  #
#---------------------------------#
[ "memincr",	  40960		  ]
[ "arena",	  1523696	  ]
[ "ordblks",	  113		  ]
[ "smblks",	  7680		  ]
[ "hblkhd",	  15360		  ]
[ "hblks",	  480		  ]
[ "usmblks",	  311584	  ]
[ "fsmblks",	  441056	  ]
[ "uordblks",	  611400	  ]
[ "fordblks",	  144296	  ]
#~EndVariableOutput~#
printf("#~BeginVariableOutput~#\n"); io.print; printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#-------------------------#
# BAT:		  io	  #
# (str)		  (int)	  #
#-------------------------#
[ "maxrss",	  3280	  ]
[ "minflt",	  126	  ]
[ "majflt",	  1	  ]
[ "nswap",	  0	  ]
[ "inblock",	  4	  ]
[ "oublock",	  7	  ]
[ "nvcsw",	  22	  ]
[ "ninvcsw",	  1	  ]
#~EndVariableOutput~#
quit;
