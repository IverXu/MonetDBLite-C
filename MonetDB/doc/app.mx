@f app
@a Peter Boncz, Menzo Windhouwer
@v 1.0
@d 18/12/1997
@* Example: Selling Applet
@T
This application shows products and prices and allows to
place orders over the internet.

\begin{center}
{\epsfxsize=0.60\textwidth
\epsffile{odmg.eps}
{\em How the User Application fits into the Monet/ODMG System}}
\end{center}

More information on the Monet/ODMG system can be found in the following
reference material:
\begin{itemize}
\item The @[<a href="monet.html">Monet Documentation</a>@
for more information on availability,
installing, and a general overview of the Monet/ODMG system.
\item The @[<a href="odl.html">ODL Reference Manual</a>@
for an exact definition of Monet/ODL. It was derived from the ODMG1.X
definition and introduces atomic extensibility but lacks some other features.
It differs widely from ODMG2.0.
\item See the @[<a href="man/odlp.html">Manual Page</a>@
for the exact calling options of the ODL parser.
\item The @[<a href="stdlib.html">ODMG Standard Library Reference</a>@
defines which standard facilities are present in ODMG, and what is their
exact interface in the ODMG/\{Java, C, C++\} programming environments
respecively.
\item The @[<a href="meta.html">ODMG Meta Model</a>@
shows the ODL schema of the Meta model that is used as Data Dictionary.
\item The @[<a href="Example.html">Example ODL Model</a>@
introduces a simple Customer-Order-Item model and shows how this
can be accessed in the ODMG/C, ODMG/C++ and ODMG/Java environments
through stub classes.
\item The @[<a href="app.html">Example ODMG Applications</a>@
uses the same data-model to build a simple application for
internet sales, that demonstrates easily how all system components
work and fit together.
\end{itemize}

@{
        basic design/ app.eps

Technically it puts all elements together
- odl model (refer back)
- C atoms (refer back)
- C++ methods (refer back)
- Java GUI
@}

@+ Java App
@f ExampleGUI
@java

@T
Import standard Java packages
@java

import java.applet.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.util.*;

@T
Import the odmg runtime system and the Example classes
@java

import odmg.*;
import Example.*;

@T
The main applet class
@java

public class ExampleGUI extends Applet implements ErrorListener,ActionListener {

@T
The one and only database
@java
  private Database db = null;

@T
Default connection values
@java
  public static String defHost = "localhost:60100";
  public static String defUser = "";

@T
Open a connection to the database specifying the portnumber together
with the servername
@java
  private void openDb(String host,String user) {

    openDb(utils.hostname(host),utils.portnr(host),user);

  }

@T
Open a connection to the database specifying the servername, the portnumber
and the username.
\begin{enumerate}
	\item get the global instance of the database;
	\item set this applet as the errorlistener;
	\item try to open the connection to the server;
	\item load the Example module;
	\item register the date class as substitute for dateAtom;
	\item catch the exceptions;
\end{enumerate}
@java
  private void openDb(String host,int port,String user) {

    db = Database.getDb();

    db.setErrorListener(this);
    date.setErrorListener(this);

    try {
      db.open(host,port,user);
      db.init(new Example.Module());
      db.setAtomType(new date());
    } catch (IOException exc) {
      System.err.println("Couldn't connect to the server");
      System.err.println(exc);
      System.exit(1);
    } catch (InitException exc) {
      System.err.println("Couldn't initialize database");
      System.err.println(exc);
      System.exit(1);
    }

    System.out.println("Logged in at: "+host+":"+port);
    System.out.println("Logged in as: "+user);

  }

@T
Commit the changes and close the connection to the database
@java
  //has to be public to facilitate WindowCloser
  public void closeDb() {

    db.commit();
    db.close();

  }

@T
This method is called by the odmg runtime system when an error occurs
@java
  public void handleError(Exception exc) {

    System.err.println("\n***** Error in odmg package *****\n");
    exc.printStackTrace();
    System.err.println("\n*********************************\n");

    Debug.out.println(exc);

    System.exit(1);

  }

@T
Give information about the expected parameters to the appletviewer/browser
@java
  public String[][] getParameterInfo() {

    String[][] info = {
      {"host","string","hostname:portnr"},
      {"user","string","username"}
    };
    return info;

  }

@T
Give information about the applet to the appletviewer/browser
@java
  public String getAppletInfo() {

    String info = "Example applet for Monets ODMG/Java binding.\n";
    info = info + "december 1997 - Version 1.0 - Menzo Windhouwer";

    return info;

  }

@T
Initialize the applet
@java
  public void init() {

    super.init();
    initLayout();

  }

@T
Start the applet.
\begin{enumerate}
	\item get the parameters;
	\item open the connection to the database.
\end{enumerate}
@java
  public void start() {

    String host = defHost;
    String param = getParameter("host");
    if (param != null)
      host = param;

    String user = defUser;
    param = getParameter("user");
    if (param != null)
      user = param;

    openDb(host,user);

    setVisible(true);

  }

@T
Close the connection with the database
@java
  public void stop() {

    closeDb();

  }

@T
Close the connection with the database
@java
  public void finalize() {

    stop();

  }

@T
Give information about the usage of this application
@java
  public static void usage() {

    System.out.println("usage: java ExampleGUI host user");

    System.exit(1);

  }

@T
Main application method.
\begin{enumerate}
	\item get the parameters;
	\item create an instance of the applet;
	\item initialize the applet and the connection to the database;
	\item create a closeable frame to display the applet.
\end{enumerate}
@java
  public static void main(String argv[]) {

    String host = defHost;
    String user = defUser;

    if (argv.length > 2)
      usage();
    if (argv.length > 1 )
      user = argv[1];
    if (argv.length > 0 )
      host = argv[0];

    ExampleGUI theExample = new ExampleGUI();

   theExample.initLayout();
    theExample.openDb(host,user);

    Frame theFrame = new Frame("ODMG/Java Example");
    theFrame.addWindowListener(new WindowCloser(theExample));
    theFrame.setLayout(new BorderLayout());
    theFrame.add("Center",theExample);

    theFrame.pack();
    theFrame.setSize(400,400);
    theFrame.setVisible(true);

  }

@T
The current buying customer
@java
  private Customer theCustomer = null;

@T
The card panel containing the two panels: one for the customer and one
to buy products
@java
  private Panel theCardPanel = null;
  private CardLayout theCards = null;

@T
The two panels
@java
  private CustomerPanel theCustomerPanel = null;
  private BuyPanel theBuyPanel = null;

@T
The names/titles of the two panels
@java
  private String theCustomerCardName = "Customer";
  private String theBuyCardName = "BUY";

@T
initialize the layout.
\begin{enumerate}
	\item create the card panel;
	\item create the two panels;
	\item create a buttonbar with buttons to swicth between the panels.
\end{enumerate}
@java
  private void initLayout() {

    setBackground(Color.lightGray);
    setLayout(new BorderLayout());

    theCardPanel = new Panel();

    theCardPanel.setLayout(new CardLayout());
    theCards = (CardLayout) theCardPanel.getLayout();

    theCustomerPanel = new CustomerPanel();
    theCardPanel.add(theCustomerCardName,theCustomerPanel);

    theBuyPanel = new BuyPanel();
    theCardPanel.add(theBuyCardName,theBuyPanel);

    add("Center",theCardPanel);
    theCards.first(theCardPanel);

    Panel theButtonBar = new Panel();
    theButtonBar.setLayout(new GridLayout(1,2));

    Button aButton = new Button(theCustomerCardName);
    aButton.addActionListener(this);
    theButtonBar.add(aButton);

    aButton = new Button(theBuyCardName);
    aButton.addActionListener(this);
    theButtonBar.add(aButton);

    add("South",theButtonBar);

  }

@T
Update and show the correct panel when a button is clicked
@java
  public void actionPerformed(ActionEvent ActEvt) {

    if (ActEvt.getActionCommand().equals(theCustomerCardName)) {
      theCustomerPanel.updateContent();
      theCards.show(theCardPanel,theCustomerCardName);
    } else if (ActEvt.getActionCommand().equals(theBuyCardName)) {
      if (theCustomer != null) {
	theBuyPanel.updateContent();
	theCards.show(theCardPanel,theBuyCardName);
      }
    }

  }

@T
This panel shows the customer information
@java
  class CustomerPanel extends Panel implements ActionListener {

@T
The AWT objects showing/editing the customer information
@java
    TextField cId = null;
    TextField cName = null;
    TextArea cAddress = null;
    TextField cCity = null;
    TextField cState = null;
    List cOrders = null;

@T
Initialize the customer GUI
@java
    public CustomerPanel() {

      setLayout(new BorderLayout());

      doublePanel theInputPanel = new doublePanel();
      
      cId = new TextField(5);
      cId.setEditable(false);
      theInputPanel.addDouble(new Label("id"),cId);

      cName = new TextField(20);
      theInputPanel.addDouble(new Label("name"),cName);

      cAddress = new TextArea(3,20);
      theInputPanel.addDouble(new Label("address"),cAddress);

      cCity = new TextField(20);
      theInputPanel.addDouble(new Label("city"),cCity);

      cState = new TextField(20);
      theInputPanel.addDouble(new Label("state"),cState);

      cOrders = new List(5);
      theInputPanel.addDouble(new Label("orders"),cOrders);

      add("Center",theInputPanel);

      Panel theButtonBar = new Panel();
      theButtonBar.setLayout(new GridLayout(1,3));

      Button aButton = new Button("find/create");
      aButton.addActionListener(this);
      theButtonBar.add(aButton);

      aButton = new Button("store");
      aButton.addActionListener(this);
      theButtonBar.add(aButton);

      aButton = new Button("clear");
      aButton.addActionListener(this);
      theButtonBar.add(aButton);

      add("North",theButtonBar);

    }

@T
Get the information of this customer or create a new customer.
\begin{enumerate}
	\item flush the contents of the cache to the server, so the latest
		information is available there;
	\item call the customerId method, this method is implemented as part
		of an odmg module in C or C++;
	\item let the AWT objects show the customer object returned by the
		customerId method;
	\item catch the exception.
\end{enumerate}
@java
    private void customerId() {

      db.flush();

      try {

	theCustomer = Example.Module.customerId(new StringValue(cName.getText().trim()),
					   new StringValue(cAddress.getText().trim()),
					   new StringValue(cCity.getText().trim()),
					   new StringValue(cState.getText().trim()));

	cId.setText(ValueToString(theCustomer.id()));
	cName.setText(ValueToString(theCustomer.name()));
	cAddress.setText(ValueToString(theCustomer.address()));
	cCity.setText(ValueToString(theCustomer.city()));
	cState.setText(ValueToString(theCustomer.state()));

	updateOrders();
	
      } catch (RpcException e) {

	handleError(e);
	
      }

    }

@T
Update the order information of this customer.
\begin{enumerate}
	\item the cache should be flushed and cleared so that the latest
		information is retrieved from the server, first flush all
		changes to the server and than clear the cache;
	\item clear the AWT order list;
	\item iterate over the orders of this customer and construct for
		each one a string for the AWT order list.
\end{enumerate}
@java
    private void updateOrders() {

      db.flush(); // first flush so the changes are not lost
      db.clear(); // clear the cache to force new fetches
			
      cOrders.removeAll();
      if (theCustomer != null) {

	Iterator ordersIterator = theCustomer.orders().iterator(true);
	while(ordersIterator.next()) {

	  Order aOrder = (Order)ordersIterator.retrieve();
	  cOrders.add("order " + ValueToString(aOrder.id()) + " at " +
		      DateToString(aOrder.orderDate()));

	}
	ordersIterator.close();

      }

    }

@T
This panel is selected, update the order list for this customer
@java 
    public void updateContent() {

      updateOrders();

    }

@T
Handle the actions for the customer buttonbar.
\begin{description}
	\item [find/create] get the information of the AWT TextFields
		and use customerId to find or create a customer matching
		this information;
	\item [store] store the information of this client;
	\item [clear] no customer is selected anymore.
\end{description}
@java
    public void actionPerformed(ActionEvent ActEvt) {

      if (ActEvt.getActionCommand().equals("find/create")) {

	customerId();

	
      } else if (ActEvt.getActionCommand().equals("store")) {

	if (theCustomer!=null) {

	  theCustomer.name(cName.getText().trim());
	  theCustomer.address(cAddress.getText().trim());
	  theCustomer.city(cCity.getText().trim());
	  theCustomer.state(cState.getText().trim());

	  db.flush();

	} else

	  customerId();

      } else  if (ActEvt.getActionCommand().equals("clear")) {

	theCustomer = null;
	
	cId.setText("");
	cName.setText("");
	cAddress.setText("");
	cCity.setText("");
	cState.setText("");

	updateOrders();

      }

    }

  }

@T
This panel shows the products information
@java
  class BuyPanel extends Panel implements ActionListener {

@T
AWT List to show the products in the database
@java
    protected List theProducts = null;

@T
Iterator to retrieve a product
@java
    protected Iterator theIterator = null;

@T
Initialize the buy GUI
@java
    public BuyPanel() {

      setLayout(new BorderLayout());

      doublePanel theInputPanel = new doublePanel();
      
      theProducts = new List(5,true);
      theInputPanel.addSingle(new Label("products to buy"));
      theInputPanel.addSingle(theProducts);

      add("Center",theInputPanel);

      Panel theButtonBar = new Panel();
      theButtonBar.setLayout(new GridLayout(1,3));

      Button aButton = new Button("buy products");
      aButton.addActionListener(this);
      theButtonBar.add(aButton);

      add("North",theButtonBar);

    }

@T
Update the list of products from the database
@java
    private void updateProducts() {

      theProducts.removeAll();

      Set products = (Set)db.lookup("Products");

      theIterator = products.iterator(true);
      while(theIterator.next()) {

	ProductImp aProduct = (ProductImp)theIterator.retrieve();
	theProducts.add(ValueToString(aProduct.id()) + " - " +
		ValueToString(aProduct.description()));

      }
      theIterator.close();

    }

@T
Create an order for the selected products for the current customer.
\begin{enumerate}
	\item get the selected products;
	\item retrieve these products from the iterator;
	\item construct for each product an item;
	\item create a date containing the current day;
	\item call the C/C++ module method buy to create an order
		for these items and this customer;
	\item catch the exception.
\end{enumerate}
@java
    private void buy() {

	int[] selection = theProducts.getSelectedIndexes();

	if (selection.length>0) {

	  theIterator.reset();

	  OidSet theItems = new OidSet(ItemImp.classID);
	  
	  for (int i=0;i<selection.length;i++) {

	    theIterator.set_pos(selection[i]);
	    Product aProduct = (Product)theIterator.retrieve();

	    ItemImp aItem = new ItemImp();
	    aItem.itemNr(new Integer(i+1));
	    aItem.productId(aProduct.id());
	    aItem.product(aProduct);
	    
	    theItems.insert(aItem);

	  }

	  try {

	    date now = date.new_date();

	    Order newOrder = theCustomer.buy(theItems,now);
	     
	  } catch(RpcException e) {

	    handleError(e);
	
	  }

	}

    }

@T
This panel is selected, update the product list
@java 
    public void updateContent() {

      updateProducts();

    }

@T
Handle the actions for the buttonbar.
\begin{description}
	\item [buy] create an order for this customer for the selected 
		products.
\end{description}
@java
    public void actionPerformed(ActionEvent ActEvt) {

      if (ActEvt.getActionCommand().equals("buy products")) {

	buy();

      }

    }

  }

@T
Wrapper to be used when printing an attribute value, these can be null.
@java
  protected String ValueToString(Object theValue) {
    if (theValue != null)
      return theValue.toString();
    return "null";
  }

@T
Wrapper to be used when printing a date value, these can be null.
@java
  protected String DateToString(dateAtom theDate) {
    if (theDate != null) {
      if (!theDate.isNil()) {
	if (theDate instanceof date) {
	  return ((date)theDate).toString();
	} else {
	  try {
            String s  = theDate.year().toString();
            s = s + "/" + theDate.month().toString();
            s = s + "/" + theDate.day().toString();
	    return s;
	  } catch (RpcException e) {
	    handleError(e);
	  }
	}
      }
    }
    return "null";
  }
}

@T
Class to support closing of the application according to the WindowManager.
@java
class WindowCloser extends WindowAdapter {

  ExampleGUI theExample = null;

  public WindowCloser(ExampleGUI theExample) {
    this.theExample = theExample;
  }
     
  public void windowClosing(WindowEvent e) {
    theExample.closeDb();
    System.exit(0);
  }
  
}

@T
Class to easy layout AWT objects
@java
class doublePanel extends Panel {
  
  public doublePanel() {
    
    setLayout(new GridBagLayout());
    
  }
  
  public doublePanel(Label theLeft,Component theRight) {
    
    setLayout(new GridBagLayout());      
    addDouble(theLeft,theRight);
    
  }
  
  public void addDouble(Label theLeft,Component theRight) {
    
    GridBagLayout theGridBag = (GridBagLayout)getLayout();
    
    GridBagConstraints theConstraints = new GridBagConstraints();
    
    theConstraints.insets = new Insets(4,4,2,2);
    theConstraints.fill = GridBagConstraints.BOTH;
    theConstraints.weightx = 1.0;
    
    theGridBag.setConstraints(theLeft,theConstraints);
    add(theLeft);
    
    theConstraints.ipadx = 4;
    theConstraints.ipady = 4;
    theConstraints.weightx = 4.0;
    theConstraints.gridwidth = GridBagConstraints.REMAINDER;
    
    theGridBag.setConstraints(theRight,theConstraints);
    add(theRight);
    
  }

  public void addSingle(Component theComp) {    

    GridBagLayout theGridBag = (GridBagLayout)getLayout();
      
    GridBagConstraints theConstraints = new GridBagConstraints();

    theConstraints.insets = new Insets(4,4,2,2);
    theConstraints.fill = GridBagConstraints.BOTH;
    theConstraints.weightx = 5.0;
    theConstraints.gridwidth = GridBagConstraints.REMAINDER;

    theGridBag.setConstraints(theComp,theConstraints);
    add(theComp);

  }

}

@T
Class that contains some extra, usefull functionality.
@java
class utils {
  
  public static String hostname(String hostport) {
    int pos = hostport.indexOf(':');
    if (pos <= 1)
      return "localhost";
    return hostport.substring(0,pos);
  }
  
  public static int portnr(String hostport) {
    int pos = hostport.indexOf(':');
    if (pos >= 0 && pos < hostport.length())
      return Integer.parseInt(hostport.substring(pos + 1));
    return 0;
  }
  
}

@T
Class that overloads the default dateAtom and is capable of handling
exceptions and interpreting the BLOb.
@java
class date extends dateAtom {

@T
Default constructors
@java
  public date() {
    super();
  }

  public date(byte[] bytes) {
    super(bytes);
  }

  public date(odmg.Atom a, int offset, int size) {
    super(a,offset,size);
  }

@T
Default date constructor for the runtime system
@java
  public odmg.Atom newInstance(odmg.Atom a, int offset) {
    return new date(a,offset,4);
  }

@T
Overloaded isNil method, a date is stored as an integer, so the 
default null value is the same as the null value for an integer.
@java
  public boolean isNil() {
    return (getInt(0) == IntValue.INT_NIL);
  } 
  
@T
The registered errorlistener
@java
  static protected ErrorListener theListener = null;

@T
Set the errorlistener
@java
  static public void setErrorListener(ErrorListener aListener) {
    theListener = aListener;
  }

@T
Handle a local error
@java
  static private void handleError(String thePlace,Exception e) {
    System.err.println("\n**** date atom *******");
    System.err.println(thePlace);

    odmg.Debug.out.println("date: "+thePlace);

    handleError(e);
  }
 
@T
Handle a global error, and pass it to the errorlistener
@java
  static public void handleError(Exception exc) {
    System.err.println("\n**** Error in odmg package: ****\n");
    exc.printStackTrace();
    System.err.println("\n********************************\n");
    
    odmg.Debug.out.println(exc); // print the error in the logfile 

    if (theListener != null) {
      theListener.handleError(exc);
      return;
    } else 
      System.exit(1);
  }

@T
Creates a new date, by calling the date_new method at the serverside..
@java
  public date(int year,int month,int day) {
    this();
    putInt(0,IntValue.INT_NIL);
    try {
       odmg.ParamList _p = new odmg.ParamList();
       _p.add(new IntValue(year));
       _p.add(new IntValue(month));
       _p.add(new IntValue(day));
       date obj = (date)db.rpc("date_new", _p, dateAtom.classID
, false );
       data = obj.data;
    } catch(RpcException e) {
      handleError("date(int,int,int)",e);
    }
  }

@T
Creates a new date that contains the current day
@java
  static public date new_date() {
    return fromDate(new Date());
  }

@T
Creates a null date
@java
  static public date null_date() {
    date newDate = new date();
    newDate.putInt(0,IntValue.INT_NIL);
    return newDate;
  }

@T
Get the year of this instant by interpreting the BLOb.
@java
  public IntValue year() { 
    IntValue result = new IntValue((data[0] << 4) | ((data[1] >> 4) & 0xF));
    return result;
  }

@T
Get the month of this instant by interpreting the BLOb. 
@java
  public IntValue month() { 
    IntValue result = new IntValue(data[1] & 0xF);
    return result;
  }

@T
Get the day of this instant by interpreting the BLOb.
@java
  public IntValue day() { 
    IntValue result = new IntValue((data[2] >> 3) & 0x1F);
    return result;
  }


@T
Overload the toString method to get a reasonable string and not a BLOb dump
@java
  public String toString() { 
    String s  = year().toString();
    s = s + "-" + month().toString();
    s = s + "-" + day().toString();
    return s;
  }

@T
Convert this date to its equivalent in java.util.Date
@java
  public Date toDate() {
    SimpleTimeZone theGMT = new SimpleTimeZone(0,"GMT");
    Calendar theCalendar = new GregorianCalendar(theGMT);
    theCalendar.clear();
    theCalendar.set(year().intValue(),
		    month().intValue()-1,
		    day().intValue(),
		    0,
		    0);
    return theCalendar.getTime();
  }

@T
Create an date containing the same day as the java.util.Date
object
@java
  static public date fromDate(Date theDate) {
    SimpleTimeZone theGMT = new SimpleTimeZone(0,"GMT");
    Calendar theCalendar = new GregorianCalendar(theGMT);
    theCalendar.clear();
    theCalendar.setTime(theDate);

    int year = theCalendar.get(Calendar.YEAR);
    int month = theCalendar.get(Calendar.MONTH)+1;
    int day = theCalendar.get(Calendar.DAY_OF_MONTH);

    return new date(year,month,day);
  }

}

@* Mil script

This scripts loads the modules and starts communication thread.

@f Example
@mil

#load modules
module(Example,jOdmg,tcpip);

#insert a new product
PROC newProduct(theDescription) := {
	o := newoid;
	id := 0;
	IF (Example_Product_id.count > 0) {
		id := Example_Product_id.max;
	}
	id := id + 1;
	c := meta_Class_ClassId.find(meta_Class_Name.reverse.find("Product"));
	Example_Product.insert(o,c);
	Example_Product_id.insert(o,id);
	Example_Product_description.insert(o,theDescription);
	print(Example_Product_id,Example_Product_description);
}

#start the listen thread
fork(listen(60100));

@* Html file

The followin HTML specification is an example of an applet tag to
incorperate the Java applet into a web page.

As Mx doesn't support extracting of this HTML file use copy and paste to
get your own copy!.

@[<PRE><TT>
<HTML>
<HEAD>
    <TITLE>ExampleGUI</TITLE>

</HEAD>

<BODY>
<BASE target=_top>

<applet height = 550 width = 500
        code = ExampleGUI.class>
<PARAM name = host value="localhost:60100">
<PARAM name = user value="">
</applet>

</BODY>
</HTML>
</TT></PRE>@

@* Makefile
@T
The following {\em Makefile} can be used to compile the application, it assumes that the Java binding for the Example database scheme has already been generated and compiled.

Change the {\em APPDIR} variable to direct the output to a different directory.

This {\em Makefile} works in the environment provided by the {\em Mdevelop} script.

As Mx doesn't support extracting of this Makefile use copy and paste to
get your own copy!. Or use the {\em Mx -x tcl} command to extract 
{\em Makefile.tcl} and rename that to {\em Makefile}.

@f Makefile
@tcl
###########################################################################
# any targets in this makefiles?

TARGETS=YES
MONETDIST=$(MONETHOME)/kernel

###########################################################################
# files

MODULES=	app
MXFILES=        $(MODULES:%=%.mx)

###########################################################################
# ok, NOW, let's get top-level settings

include $(MONETDIST)/Makefile

###########################################################################

ifndef JAVAC
all:
else

JAVADIR=	$(MONETHOME)/java
DIRS +=		$(JAVADIR)
APPDIR=		$(JAVADIR)/Example
DIRS += 	$(APPDIR)/GUI 

CLASSPATH=	.:$(LIBDIR)/odmg.jar:$(JAVADIR)
export CLASSPATH

all:	;
	$(MX) -R$(APPDIR)/GUI -x java app.mx
	$(JAVAC) -d $(APPDIR)/GUI $(APPDIR)/GUI/*.java

endif

###########################################################################
#eof
