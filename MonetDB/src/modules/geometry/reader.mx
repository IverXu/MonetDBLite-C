@f reader
@A C.W. Quak
@h
#ifndef __STRINGREADER_H__
#define __STRINGREADER_H__

#include <ctype.h>
#include <strings.h>
#include <stdlib.h>
#include <stdio.h>
// #include <Boolean.h>

class StringReader
{
private:
   char*  start;
   char*  position;
public:

   StringReader(char* s);

   void skipSpaces();
   void skipToSpace();
   bool skipChar(char c);
   bool skipString(const char* s);

   int readInt();
   char readChar();
   double readDouble();
   char* readString();

   bool startsWith(const char* s) const;

   char nextChar() const;
   size_t bytesread() const;
};
#endif /* __STRINGREADER_H__ */
@+ Implementation Code for precision values.
@C
#include "reader.h"
#include <gdk.h>
#include <stdlib.h>
#include <stdio.h>

char* StringReader::readString()
{
   skipSpaces();
   char* start = position;
   skipToSpace();
   if (start == position)
      return(NULL);
   else
   {
      char* rval = new char[1 +position - start];
      memcpy(rval,start,position - start);
      rval[position - start] = 0;
      return(rval);
   }
}


void StringReader::skipToSpace()
{
   while(!isspace(*position))
      ++position;
}

void StringReader::skipSpaces()
{
   while(*position != 0)
   {
      if (!isspace(*position))
         break;
      ++position;
   }

#ifdef DEBUG
   if (*position != 0)
      GDKwarning("Spaces skipped until position %d\n",bytesread());
   else
      GDKwarning("Spaces skipped until end of string at %d\n",bytesread());
#endif
}

StringReader::StringReader(char* s)
{
   start = s;
   position = s;

#ifdef DEBUG
   GDKwarning("Stringreader(\"%s\") called\n",s);
#endif

}

size_t StringReader::bytesread() const
{
   return(position - start);
}

char StringReader::readChar()
{
   char rval = *position;

   if (rval != 0)
      ++position;

   return(rval);
}

int StringReader::readInt()
{
   return(strtol(position,&position,10));
}

double StringReader::readDouble()
{
   double rval = strtod(position,&position);
#ifdef DEBUG
   GDKwarning("double %f read now at position %d\n",rval,bytesread());
#endif

   return(rval);
}

bool StringReader::skipChar(char c)
{
   char* oldpos = position;
   position = index(position,c);

   if (position == 0)
   {
     position = oldpos;

#ifdef DEBUG
      GDKwarning("Char %c not found\n",c);
#endif

     return(false);
   }
   else
   {
      ++position;

#ifdef DEBUG
      GDKwarning("Char %c found at position %d\n",c,bytesread());
#endif
      return(true);
   }
}

char StringReader::nextChar() const
{
   return(*position);
}

bool StringReader::skipString(const char* s)
{
   skipSpaces();
   char* oldpos = position;
   position = strstr(position,s);

   if (position == 0)
   {
      position = oldpos;
      return(false);
   }
   else
   {
      position += strlen(s);
      return(true);
   }
}

bool StringReader::startsWith(const char* s) const
{
   return(strncmp(position,s,strlen(s)) == 0);
}
