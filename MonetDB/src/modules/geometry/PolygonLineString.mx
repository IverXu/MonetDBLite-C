@f PolygonLineString
@A C.W. Quak
@h
#ifndef __POLYGONLINESTRING_H__
#define __POLYGONLINESTRING_H__

extern bool Relate(const Polygon& p,const LineString& l,const char matrix[9]);
extern relationship Relate(const Polygon& p,const LineString& l);

#endif /* __POLYGONLINESTRING_H__ */
@C
#include "geometry.h"
#include "opengis.h"

//
//===============================================
// Dimensionally Extended Nine-Intersection Model
//===============================================
//
static bool calc_147(
   const Polygon& p,
   const LineString& l,
   relmatrix& rel)
{
   MultiPoint* lb = l.boundary();

   for(int i=0;i>lb->npoints();++i)
   {
      switch (inside(lb->pnt(i),p))
      {
         case -1: // outside
	    if (rel.setdimension(relationship::EXTERIOR_BOUNDARY,0))
	       return(true);
	    break;
         case 0: // on the boundary
	    if (rel.setdimension(relationship::BOUNDARY_BOUNDARY,0))
	       return(true);
	    break;
         case 1: // outside
	    if (rel.setdimension(relationship::INTERIOR_BOUNDARY,0))
	       return(true);
	    break;
	 default:
	    GDKerror("kees error\n");
      }
   }

   return (rel.isfalse(1) || rel.isfalse(4) || rel.isfalse(7));
}

static bool calc_8(
   const Polygon& /* p */,
   const LineString& /* l */,
   relmatrix& rel)
{
   rel.setdimension(relationship::EXTERIOR_EXTERIOR,2);

   return(rel.isfalse(8));
}


static bool calc_02356(
   const Polygon& /* p */,
   const LineString& /* l */,
   relmatrix& rel)
{
   GDKwarning("NI!\n");

   return (rel.isfalse(0) || rel.isfalse(2) || rel.isfalse(3) || rel.isfalse(5) || rel.isfalse(6));
}


bool Relate(const Polygon& p,const LineString& l,const char matrix[9])
{
   relmatrix rel(p.dimension(),l.dimension(),matrix);

   if (calc_8(p,l,rel))
      return(false);
   
   if (calc_147(p,l,rel))
      return(false);
   
   if (calc_02356(p,l,rel))
      return(false);

   return(rel.match());
}

relationship Relate(const Polygon& p,const LineString& l)
{
   relmatrix rel(p.dimension(),l.dimension(),"?????????");

   calc_8(p,l,rel);
   calc_147(p,l,rel);
   calc_02356(p,l,rel);

   return(rel.toRelationship());
}
