@f precision
@A C.W. Quak
@* The precision class
@h
#ifndef __PRECISION_H__
#define __PRECISION_H__

#ifdef USEINT2
   #define INTCOORDS

   typedef short coord;
   #define COORD_MIN SHRT_MIN
   #define COORD_MAX SHRT_MAX
#endif

#ifdef USEINT4
   #define INTCOORDS

   typedef int coord;
   #define COORD_MIN INT_MIN
   #define COORD_MAX INT_MAX
#endif

#ifdef USEFLOAT4
   #define FLOATCOORDS

   typedef float coord;
   #define COORD_MIN FLT_MIN
   #define COORD_MAX FLT_MAX
#endif

#ifdef USEFLOAT8
   #define FLOATCOORDS

   typedef double coord;
   #define COORD_MIN DBL_MIN
   #define COORD_MAX DBL_MAX
#endif

#ifndef COORD_MIN
   #define FLOATCOORDS

   typedef double coord;
   #define COORD_MIN DBL_MIN
   #define COORD_MAX DBL_MAX
#endif

#ifdef FLOATCOORDS
   #define get_coord get_double
   #define put_coord put_double
#else
   #define get_coord get_long
   #define put_coord put_long
#endif

extern long get_long(const char* startp,char** endp);
extern double get_double(const char* startp,char** endp);

extern int put_long(char* startp,long l);
extern int put_double(char* startp,double d);

extern void convert_endianism(long& l);
extern void convert_endianism(double& d);
extern void convert_endianism(int& i);
extern void convert_endianism(short& s);

#endif /* __PRECISION_H__ */
@+ Implementation Code for precision values.
@C
#include "precision.h"
#include <gdk.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>

long get_long(const char* startp,char** endp)
{
   return(strtol(startp,endp,10));
}

double get_double(const char* startp,char** endp)
{
   return(strtod(startp,endp));
}

int put_long(char* startp,long l)
{
   int len = sprintf(startp,"%ld",l);
   return(len);
}

int put_double(char* startp,double d)
{
   if (d == floor(d))
       return(sprintf(startp,"%.1f",d));
   else 
       return(sprintf(startp,"%f",d));
}

void convert_endianism(double& d)
{
   int* array = (int *)(&d);

   int tmp = htonl(array[0]);
   array[0] = htonl(array[1]);
   array[1] = tmp;
}

void convert_endianism(int& i)
{
   i = htonl(i);
}

void convert_endianism(short& s)
{
   s = htons(s);
}

