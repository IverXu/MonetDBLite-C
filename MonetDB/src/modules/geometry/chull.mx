@f chull
@t The chull file
@a C.W. Quak
@* The chull file
This file contains C++ source code to calculate the convex hull of a
polygon. The implementation is a variant of the Graham scan.
@h
#ifndef __CHULL_H__
#define __CHULL_H__ 

//
// All these functions return a convex hull of their parameters.
//
extern polygon* convex_hull(const polygon& p);
extern polygon* convex_hull(const polyline& p);
extern polygon* convex_hull(const cpolygon& p);
extern polygon* convex_hull(Array<point>& points);

#endif /* __CHULL_H__ */
@C
#include "geometry.h"
#include "Array.h"
#include "gis.proto.h"

//
// GDKwarning: this still goes wrong when either the left or the righ margin is not
// in general position.
//
polygon* convex_hull(Array<point>& points)
{
   //
   // Sort the points in the array on x coordinate.
   //
   points.sort( (int (*)(const void*, const void*)) point_comp);

   //
   // Calculate the upper convex hull.
   //
   Array<int> upper;
   int current = 0;
   while((current+1 < points.nitems()) && (points[current].x == points[current+1].x))
      ++current;
   while(current != points.nitems())
   {
      int last =upper.nitems() -1;

      if((last < 1) || (angle(points[upper[last-1]],points[upper[last]],points[current]) < M_PI))
      {
	 //
	 // Go to the next point.
	 //
	 upper.append(current++);

	 while((current+1 < points.nitems()) && (points[current].x == points[current+1].x))
	    ++current;
      }
      else
	 upper.pop();
   }

   //
   // Calculate the lower convex hull.
   //
   Array<int> lower;
   current = 0;
   while(current != points.nitems())
   {
      int last =lower.nitems() -1;

      if((last < 1) || (angle(points[lower[last-1]],points[lower[last]],points[current]) > M_PI))
      {
	 lower.append(current);
	 coord curx = points[current].x;
	 while((current + 1 < points.nitems()) && (points[current + 1].x == curx))
	    ++current;
	 ++current;
      }
      else
	 lower.pop();
   }

   //
   // Append the upper and the lower hull and remove duplicates.
   //
   polygon* rval = polygon::create(upper.nitems() + lower.nitems() - 2);
   int n=0;
   for(int i=0;i<upper.nitems();++i)
      rval->data(n++) = points[upper[i]];
   for(int j=lower.nitems() - 2;j>0;--j)
      rval->data(n++) = points[lower[j]];

   return(rval);
}

polygon* convex_hull(const polyline& p)
{
   Array<point> points;

   for(int i=0;i<p.npoints();++i)
      points.append(p[i]);
   
   return(convex_hull(points));
}

polygon* convex_hull(const polygon& p)
{
   Array<point> points;

   for(int i=0;i<p.npoints();++i)
      points.append(p[i]);
   
   return(convex_hull(points));
}

polygon* convex_hull(const cpolygon& p)
{
   return(convex_hull(p.boundary()));
}
