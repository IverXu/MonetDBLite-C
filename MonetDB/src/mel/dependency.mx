@f dependency
@a Niels Nes

@h
#ifndef _DEPENDENCY_H_
#define _DEPENDENCY_H_

#include "symbol.h"
#include "list.h"

class Dependency : public Symbol {
    public:
	Dependency( int t, char *n, char *fn ); 

	char *filename() const;
	void setModule ( Symbol *m );
	Symbol *Module ( ) const;

	virtual ostream &print( language *l, ostream &o ) const ;
    private:
	char *_fn;
	Symbol *_mod;
};
#endif // _DEPENDENCY_H_

@C
#include "dependency.h"
#include "language.h"
#include <string.h>


Dependency::Dependency( int t, char *n, char *fn ) : Symbol(t,n) {
	_fn = strdup(fn);
	_mod = NULL;
}

char *Dependency::filename() const {
	return _fn;
}

void Dependency::setModule ( Symbol *m ){
	_mod = m;
}

Symbol * Dependency::Module ( ) const{
	return _mod;
}

ostream &Dependency::print( language *l, ostream &o ) const {
	return l->gen_dependency( o, *this );
}
