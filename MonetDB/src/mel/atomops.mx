@f atomops
@a Niels Nes

@h
#ifndef _ATOMOPS_H_
#define _ATOMOPS_H_

#include "ops.h"
#include "list.h"

enum atom_ops_t {
	OP_TOSTR,
	OP_FROMSTR,
	OP_COMP,
	OP_HASH,
	OP_NULL,
	OP_CONVERT,
	OP_FIX,
	OP_UNFIX,
	OP_PUT,
	OP_LEN,
	OP_DEL, 
	OP_HEAP,
	OP_CHECK,
	OP_HCONVERT,
	OP_NEQUAL	
};

class Atomops : public Ops {
    public:
	Atomops( int t, char *n, int op ); 

	static const char * string( int op );

	virtual ostream &print( language *l, ostream &o ) const ;
};
#endif // _ATOMOPS_H_

@C
#include "atomops.h"
#include "language.h"
#include <string.h>


Atomops::Atomops( int t, char *n, int op ) : Ops(t,n,op) { }

const char *Atomops::string( int op ){
   	switch( op ){
	case OP_TOSTR :	 return "tostr";
	case OP_FROMSTR :return "fromstr";
	case OP_COMP :	 return "cmp";
	case OP_NEQUAL : return "cmp";
	case OP_HASH :	 return "hash";
	case OP_NULL :	 return "null";
	case OP_LEN :	 return "length";
	case OP_CONVERT :return "convert";
	case OP_PUT :	 return "put";
	case OP_FIX :	 return "fix";
	case OP_UNFIX :	 return "unfix";
	case OP_DEL : 	 return "del";
	case OP_CHECK :  return "check";
	case OP_HEAP :	 return "heap";
	case OP_HCONVERT:return "heap_convert";
	}
	return "";
}

ostream &Atomops::print( language *l, ostream &o ) const {
	return l->gen_atomops( o, *this );
}
