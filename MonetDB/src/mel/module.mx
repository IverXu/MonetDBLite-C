@f module
@a Niels Nes

@h
#ifndef _MODULE_H_
#define _MODULE_H_

#include "symbol.h"
#include "list.h"

class Module : public Symbol {
    public:
	Module( int t, char *n, char *fn, 
		    List<Symbol> *deps = NULL,
		    List<Symbol> *defs = NULL );
	List<Symbol> *Deps() const ;
	List<Symbol> *Defs() const ;
	char *filename() const;

	virtual ostream &print( language *l, ostream &o ) const ;
    private:
	char *_fn;
	List<Symbol>*	 _deps;
	List<Symbol>*	 _defs;
};
#endif // _MODULE_H_

@C
#include "module.h"
#include "language.h"
#include <string.h>


Module::Module( int t, char *n, char *fn,
		List<Symbol> *deps,
		List<Symbol> *defs ) : Symbol(t,n) {
	_fn = strdup(fn);
	_deps = deps;
	_defs = defs;
}

List<Symbol> *Module::Deps() const {
	return _deps;
}

List<Symbol> *Module::Defs() const {
	return _defs;
}

char *Module::filename() const {
	return _fn;
}

ostream &Module::print( language *l, ostream &o ) const {
	return l->gen_module( o, *this );
};
